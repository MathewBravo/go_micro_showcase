// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/readspeed.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReadSpeedService_ReadSpeedTest_FullMethodName      = "/read_speed.ReadSpeedService/ReadSpeedTest"
	ReadSpeedService_CalculateReadSpeed_FullMethodName = "/read_speed.ReadSpeedService/CalculateReadSpeed"
)

// ReadSpeedServiceClient is the client API for ReadSpeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadSpeedServiceClient interface {
	ReadSpeedTest(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*ReadSpeedResponse, error)
	CalculateReadSpeed(ctx context.Context, in *PagesAndTime, opts ...grpc.CallOption) (*ReadSpeedCalculation, error)
}

type readSpeedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadSpeedServiceClient(cc grpc.ClientConnInterface) ReadSpeedServiceClient {
	return &readSpeedServiceClient{cc}
}

func (c *readSpeedServiceClient) ReadSpeedTest(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*ReadSpeedResponse, error) {
	out := new(ReadSpeedResponse)
	err := c.cc.Invoke(ctx, ReadSpeedService_ReadSpeedTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSpeedServiceClient) CalculateReadSpeed(ctx context.Context, in *PagesAndTime, opts ...grpc.CallOption) (*ReadSpeedCalculation, error) {
	out := new(ReadSpeedCalculation)
	err := c.cc.Invoke(ctx, ReadSpeedService_CalculateReadSpeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadSpeedServiceServer is the server API for ReadSpeedService service.
// All implementations must embed UnimplementedReadSpeedServiceServer
// for forward compatibility
type ReadSpeedServiceServer interface {
	ReadSpeedTest(context.Context, *NoParam) (*ReadSpeedResponse, error)
	CalculateReadSpeed(context.Context, *PagesAndTime) (*ReadSpeedCalculation, error)
	mustEmbedUnimplementedReadSpeedServiceServer()
}

// UnimplementedReadSpeedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReadSpeedServiceServer struct {
}

func (UnimplementedReadSpeedServiceServer) ReadSpeedTest(context.Context, *NoParam) (*ReadSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSpeedTest not implemented")
}
func (UnimplementedReadSpeedServiceServer) CalculateReadSpeed(context.Context, *PagesAndTime) (*ReadSpeedCalculation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateReadSpeed not implemented")
}
func (UnimplementedReadSpeedServiceServer) mustEmbedUnimplementedReadSpeedServiceServer() {}

// UnsafeReadSpeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadSpeedServiceServer will
// result in compilation errors.
type UnsafeReadSpeedServiceServer interface {
	mustEmbedUnimplementedReadSpeedServiceServer()
}

func RegisterReadSpeedServiceServer(s grpc.ServiceRegistrar, srv ReadSpeedServiceServer) {
	s.RegisterService(&ReadSpeedService_ServiceDesc, srv)
}

func _ReadSpeedService_ReadSpeedTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSpeedServiceServer).ReadSpeedTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReadSpeedService_ReadSpeedTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSpeedServiceServer).ReadSpeedTest(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSpeedService_CalculateReadSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagesAndTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSpeedServiceServer).CalculateReadSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReadSpeedService_CalculateReadSpeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSpeedServiceServer).CalculateReadSpeed(ctx, req.(*PagesAndTime))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadSpeedService_ServiceDesc is the grpc.ServiceDesc for ReadSpeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadSpeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "read_speed.ReadSpeedService",
	HandlerType: (*ReadSpeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadSpeedTest",
			Handler:    _ReadSpeedService_ReadSpeedTest_Handler,
		},
		{
			MethodName: "CalculateReadSpeed",
			Handler:    _ReadSpeedService_CalculateReadSpeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/readspeed.proto",
}
